/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package org.c3lang.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import org.c3lang.intellij.C3ParserDefinition;
import org.c3lang.intellij.psi.C3Types;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/lerno/Projects/Java/c3intellij/src/main/java/org/c3lang/intellij/C3.flex</tt>
 */
class C3Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_RAW_STRING = 4;
  public static final int IN_STRING = 6;
  public static final int IN_CHAR = 8;
  public static final int IN_BYTES_STRING = 10;
  public static final int IN_BYTES_CHAR = 12;
  public static final int IN_BYTES_RAW_STRING = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\123\1\124\1\37\2\52\1\51\22\123\1\40\1\111\1\120\1\35\1\36\1\107\1\76"+
    "\1\122\1\106\1\114\1\110\1\13\1\116\1\77\1\47\1\50\1\7\1\17\1\22\1\21\1\23"+
    "\1\6\1\20\1\6\1\16\1\1\1\103\1\117\1\73\1\74\1\75\1\102\1\34\1\5\1\46\2\5"+
    "\1\12\1\33\2\10\1\31\2\10\1\27\2\10\1\44\1\15\4\10\1\25\2\10\1\42\2\10\1\105"+
    "\1\125\1\113\1\101\1\4\1\121\1\54\1\45\1\63\1\3\1\11\1\32\1\70\1\65\1\30\1"+
    "\2\1\64\1\26\1\61\1\55\1\43\1\14\1\72\1\62\1\60\1\57\1\24\1\67\1\66\1\41\1"+
    "\56\1\71\1\104\1\100\1\112\1\115\6\0\1\53\242\0\2\53\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\2\3\1\1\1\4\1\2\1\3"+
    "\1\5\4\3\3\1\1\6\2\3\1\7\1\10\11\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\4\41\1\42\1\43\1\42\1\44\1\43\1\1\1\42"+
    "\1\45\1\42\1\46\1\42\2\46\2\0\1\2\2\0"+
    "\2\3\1\47\1\0\1\50\3\0\3\3\1\51\1\52"+
    "\7\3\1\53\7\3\1\54\1\55\1\0\1\1\1\56"+
    "\1\0\1\1\2\57\1\0\1\60\3\57\1\0\7\57"+
    "\1\61\1\62\1\63\5\3\1\64\1\65\1\66\1\67"+
    "\23\3\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\3\0\1\124\1\0"+
    "\1\2\3\0\1\124\1\125\2\3\3\2\10\3\1\126"+
    "\3\3\1\127\1\130\3\3\1\131\2\3\1\132\1\57"+
    "\1\133\6\57\1\134\2\57\1\135\1\136\13\57\4\3"+
    "\1\137\1\140\1\3\1\141\5\3\1\142\15\3\1\143"+
    "\1\144\1\145\1\124\2\0\4\3\4\0\1\146\1\3"+
    "\1\147\1\150\1\3\1\151\2\3\1\152\1\153\10\3"+
    "\10\57\1\154\20\57\2\3\1\155\4\3\1\156\2\3"+
    "\1\157\12\3\1\160\1\161\1\3\1\162\1\124\3\0"+
    "\1\163\3\3\1\0\1\3\1\164\1\3\1\165\4\3"+
    "\1\166\1\167\1\3\1\170\1\171\2\57\1\172\5\57"+
    "\1\173\1\174\11\57\1\175\10\57\2\3\1\176\7\3"+
    "\1\177\2\3\1\200\2\3\1\201\1\202\1\203\1\0"+
    "\2\3\1\204\1\0\1\205\1\3\1\206\1\207\1\210"+
    "\1\211\2\3\3\57\1\212\2\57\1\213\15\57\1\214"+
    "\2\57\1\215\3\57\3\3\1\216\1\3\1\217\1\220"+
    "\1\221\1\222\1\223\1\224\1\225\1\3\1\226\1\3"+
    "\1\227\1\230\1\3\1\231\3\57\1\232\5\57\1\233"+
    "\1\234\1\57\1\235\1\236\1\57\1\237\1\240\1\241"+
    "\1\242\4\57\5\3\1\243\1\244\1\3\1\245\1\246"+
    "\4\57\1\247\1\250\1\251\2\57\1\252\1\253\1\254"+
    "\1\255\1\3\1\256\1\257\1\260\1\261\1\262\3\57"+
    "\1\263\1\264\1\57\1\265\1\266\1\57\1\267\1\270"+
    "\1\271";

  private static int [] zzUnpackAction() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba"+
    "\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0a6a"+
    "\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a"+
    "\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca"+
    "\0\u1020\0\u1076\0\u10cc\0\u1122\0\u1178\0\u02b0\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u11ce\0\u02b0"+
    "\0\u1224\0\u127a\0\u02b0\0\u12d0\0\u1326\0\u02b0\0\u02b0\0\u137c"+
    "\0\u13d2\0\u02b0\0\u1428\0\u147e\0\u14d4\0\u152a\0\u1580\0\u15d6"+
    "\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u17da\0\u1830\0\u0408"+
    "\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u02b0"+
    "\0\u02b0\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4"+
    "\0\u035c\0\u1d3a\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e"+
    "\0\u035c\0\u1f94\0\u070e\0\u1fea\0\u2040\0\u0764\0\u2096\0\u20ec"+
    "\0\u2142\0\u2198\0\u21ee\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c"+
    "\0\u23f2\0\u2448\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4\0\u27fa"+
    "\0\u02b0\0\u02b0\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae"+
    "\0\u2d04\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u02b0\0\u2f08\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u147e\0\u152a\0\u1580\0\u2f5e\0\u2fb4\0\u02b0\0\u300a"+
    "\0\u3060\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e\0\u3264\0\u32ba"+
    "\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a"+
    "\0\u35c0\0\u035c\0\u3616\0\u366c\0\u36c2\0\u3718\0\u035c\0\u376e"+
    "\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u3a1e"+
    "\0\u3a74\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u3c22\0\u20ec\0\u3c78"+
    "\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28"+
    "\0\u3f7e\0\u3fd4\0\u402a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8"+
    "\0\u422e\0\u4284\0\u02b0\0\u42da\0\u4330\0\u035c\0\u4386\0\u43dc"+
    "\0\u4432\0\u4488\0\u44de\0\u035c\0\u4534\0\u458a\0\u45e0\0\u4636"+
    "\0\u468c\0\u46e2\0\u4738\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6"+
    "\0\u493c\0\u035c\0\u02b0\0\u02b0\0\u4992\0\u49e8\0\u4a3e\0\u4a94"+
    "\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u4cee\0\u035c"+
    "\0\u4d44\0\u035c\0\u035c\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u035c"+
    "\0\u035c\0\u4ef2\0\u4f48\0\u4f9e\0\u4ff4\0\u504a\0\u50a0\0\u50f6"+
    "\0\u514c\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\u52fa\0\u5350\0\u53a6"+
    "\0\u53fc\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656"+
    "\0\u56ac\0\u5702\0\u5758\0\u57ae\0\u5804\0\u585a\0\u58b0\0\u5906"+
    "\0\u595c\0\u59b2\0\u5a08\0\u5a5e\0\u035c\0\u5ab4\0\u5b0a\0\u5b60"+
    "\0\u5bb6\0\u035c\0\u5c0c\0\u5c62\0\u035c\0\u5cb8\0\u5d0e\0\u5d64"+
    "\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68\0\u5fbe\0\u035c"+
    "\0\u035c\0\u6014\0\u035c\0\u02b0\0\u606a\0\u60c0\0\u6116\0\u035c"+
    "\0\u616c\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u035c\0\u631a\0\u035c"+
    "\0\u6370\0\u63c6\0\u641c\0\u6472\0\u035c\0\u64c8\0\u651e\0\u035c"+
    "\0\u035c\0\u6574\0\u65ca\0\u20ec\0\u6620\0\u6676\0\u66cc\0\u6722"+
    "\0\u6778\0\u20ec\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c"+
    "\0\u69d2\0\u6a28\0\u6a7e\0\u6ad4\0\u20ec\0\u6b2a\0\u6b80\0\u6bd6"+
    "\0\u6c2c\0\u6c82\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u035c"+
    "\0\u6e86\0\u6edc\0\u6f32\0\u6f88\0\u6fde\0\u7034\0\u708a\0\u035c"+
    "\0\u70e0\0\u7136\0\u035c\0\u718c\0\u71e2\0\u035c\0\u035c\0\u035c"+
    "\0\u7238\0\u728e\0\u72e4\0\u035c\0\u733a\0\u035c\0\u7390\0\u035c"+
    "\0\u035c\0\u035c\0\u035c\0\u73e6\0\u743c\0\u7492\0\u74e8\0\u753e"+
    "\0\u20ec\0\u7594\0\u75ea\0\u20ec\0\u7640\0\u7696\0\u76ec\0\u7742"+
    "\0\u7798\0\u77ee\0\u7844\0\u789a\0\u78f0\0\u7946\0\u799c\0\u79f2"+
    "\0\u7a48\0\u20ec\0\u7a9e\0\u7af4\0\u20ec\0\u7b4a\0\u7ba0\0\u7bf6"+
    "\0\u7c4c\0\u7ca2\0\u7cf8\0\u035c\0\u7d4e\0\u035c\0\u035c\0\u035c"+
    "\0\u035c\0\u035c\0\u035c\0\u035c\0\u7da4\0\u035c\0\u7dfa\0\u035c"+
    "\0\u035c\0\u7e50\0\u7ea6\0\u7efc\0\u7f52\0\u7fa8\0\u7ffe\0\u8054"+
    "\0\u80aa\0\u8100\0\u8156\0\u81ac\0\u20ec\0\u20ec\0\u8202\0\u20ec"+
    "\0\u20ec\0\u8258\0\u20ec\0\u20ec\0\u20ec\0\u20ec\0\u82ae\0\u8304"+
    "\0\u835a\0\u83b0\0\u8406\0\u845c\0\u84b2\0\u8508\0\u855e\0\u035c"+
    "\0\u035c\0\u85b4\0\u20ec\0\u20ec\0\u860a\0\u8660\0\u86b6\0\u870c"+
    "\0\u20ec\0\u20ec\0\u20ec\0\u8762\0\u87b8\0\u20ec\0\u20ec\0\u20ec"+
    "\0\u20ec\0\u880e\0\u035c\0\u035c\0\u035c\0\u035c\0\u035c\0\u8864"+
    "\0\u88ba\0\u8910\0\u20ec\0\u20ec\0\u8966\0\u035c\0\u20ec\0\u89bc"+
    "\0\u20ec\0\u20ec\0\u20ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\12\1\17"+
    "\1\16\1\20\1\16\1\21\1\13\1\16\6\12\1\22"+
    "\1\16\1\23\1\16\1\24\1\16\1\25\1\16\1\26"+
    "\1\27\1\30\2\31\1\32\1\16\1\13\1\16\1\33"+
    "\1\16\1\34\1\35\1\11\1\31\1\11\1\36\1\37"+
    "\1\13\1\40\1\41\1\42\1\43\1\44\2\13\1\45"+
    "\1\46\3\13\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\11\1\31\1\11\37\77\1\100\10\77"+
    "\1\101\37\77\1\102\15\77\52\103\2\11\45\103\1\104"+
    "\4\103\37\105\1\106\11\105\1\106\1\11\45\105\1\107"+
    "\2\105\2\11\1\110\37\111\1\106\11\111\1\106\1\11"+
    "\47\111\1\112\2\11\1\110\37\113\1\106\11\113\1\106"+
    "\1\11\45\113\1\114\2\113\2\11\1\113\37\115\1\106"+
    "\11\115\1\106\1\11\47\115\1\116\2\11\1\115\52\103"+
    "\2\11\45\103\1\117\4\103\127\0\1\12\2\0\1\120"+
    "\1\0\2\12\1\0\2\121\3\0\6\12\2\122\2\0"+
    "\2\123\15\0\1\124\57\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\17\13\34\0\10\13\1\125\1\13\1\0"+
    "\14\13\1\126\3\13\5\0\2\13\1\127\3\13\5\0"+
    "\17\13\35\0\2\13\1\130\1\16\2\0\1\16\1\13"+
    "\1\16\1\0\1\13\1\16\6\0\1\13\1\16\1\13"+
    "\1\16\1\13\1\16\1\13\1\16\5\0\1\13\1\16"+
    "\1\13\1\16\1\13\1\16\5\0\17\13\34\0\1\16"+
    "\2\131\5\16\1\131\1\16\1\0\1\131\7\16\1\131"+
    "\1\16\1\131\1\16\1\131\1\16\1\131\1\16\5\0"+
    "\1\131\1\16\1\131\1\16\1\131\1\16\5\0\17\131"+
    "\34\0\1\12\2\0\1\120\1\0\2\12\1\0\2\121"+
    "\3\0\6\12\2\122\2\0\2\123\7\0\2\132\2\133"+
    "\2\134\1\124\57\0\12\13\1\0\12\13\1\135\5\13"+
    "\5\0\1\136\5\13\5\0\1\13\1\137\15\13\46\0"+
    "\1\140\60\0\1\141\32\0\12\13\1\0\1\142\11\13"+
    "\1\143\1\13\1\144\3\13\5\0\6\13\5\0\1\13"+
    "\1\145\2\13\1\146\12\13\34\0\12\13\1\0\20\13"+
    "\5\0\2\13\1\147\3\13\5\0\17\13\34\0\12\13"+
    "\1\0\1\150\15\13\1\151\1\13\5\0\6\13\5\0"+
    "\1\13\1\152\2\13\1\153\1\154\1\13\1\155\7\13"+
    "\34\0\12\13\1\0\12\13\1\156\5\13\5\0\2\13"+
    "\1\157\3\13\5\0\1\160\1\161\15\13\35\0\2\162"+
    "\1\163\1\164\2\0\1\164\1\162\1\164\1\0\1\162"+
    "\1\164\6\0\1\162\1\164\1\162\1\164\1\162\1\164"+
    "\1\162\1\164\5\0\1\162\1\164\1\162\1\164\1\162"+
    "\1\164\5\0\17\162\35\0\2\165\1\166\1\167\2\0"+
    "\1\167\1\165\1\167\1\0\1\165\1\167\6\0\1\165"+
    "\1\167\1\165\1\167\1\165\1\167\1\165\1\167\5\0"+
    "\1\165\1\167\1\165\1\167\1\165\1\167\5\0\17\165"+
    "\35\0\1\170\1\171\1\172\1\173\2\0\1\173\1\174"+
    "\1\173\1\0\1\170\1\173\6\0\1\170\1\173\1\170"+
    "\1\173\1\175\1\173\1\176\1\173\2\0\1\177\2\0"+
    "\1\170\1\173\1\170\1\173\1\170\1\173\5\0\1\200"+
    "\1\201\1\170\1\202\1\203\2\170\1\204\3\170\1\205"+
    "\2\170\1\206\72\0\2\31\11\0\1\31\51\0\1\31"+
    "\2\0\12\13\1\0\20\13\5\0\6\13\5\0\17\13"+
    "\25\0\1\207\1\210\1\211\4\0\12\13\1\0\4\13"+
    "\1\212\7\13\1\213\1\13\1\214\1\13\5\0\2\13"+
    "\1\215\3\13\5\0\6\13\1\216\10\13\102\0\1\217"+
    "\126\0\1\220\23\0\1\221\13\0\1\222\16\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\1\13\1\223\2\13"+
    "\1\224\12\13\34\0\10\13\1\225\1\13\1\0\10\13"+
    "\1\226\7\13\5\0\6\13\5\0\17\13\34\0\12\13"+
    "\1\0\12\13\1\227\5\13\5\0\6\13\5\0\2\13"+
    "\1\230\3\13\1\231\10\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\3\13\1\232\5\13\1\233\1\234"+
    "\4\13\34\0\12\13\1\0\20\13\5\0\2\13\1\235"+
    "\3\13\5\0\1\236\16\13\34\0\10\13\1\237\1\13"+
    "\1\0\20\13\5\0\6\13\5\0\17\13\34\0\12\13"+
    "\1\0\20\13\5\0\2\13\1\240\3\13\5\0\1\241"+
    "\10\13\1\242\5\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\11\13\1\243\5\13\34\0\12\13\1\0"+
    "\20\13\5\0\2\13\1\244\3\13\5\0\1\245\16\13"+
    "\126\0\1\246\1\247\125\0\1\250\1\251\124\0\1\252"+
    "\1\253\15\0\1\254\1\255\105\0\1\256\1\0\1\257"+
    "\123\0\1\260\1\11\1\0\1\261\122\0\1\262\3\0"+
    "\1\263\11\0\1\264\107\0\1\265\133\0\1\266\1\267"+
    "\125\0\1\270\122\0\1\271\120\0\1\272\125\0\1\273"+
    "\126\0\1\274\125\0\1\275\125\0\1\276\14\0\1\277"+
    "\14\0\37\77\1\0\10\77\1\0\37\77\1\0\15\77"+
    "\110\0\1\300\65\0\1\301\176\0\1\103\4\0\37\105"+
    "\1\0\11\105\2\0\45\105\1\0\2\105\3\0\37\103"+
    "\1\0\11\103\2\0\50\103\2\0\1\103\37\111\1\0"+
    "\11\111\2\0\47\111\4\0\37\113\1\0\11\113\2\0"+
    "\45\113\1\0\2\113\2\0\1\113\37\0\2\302\10\0"+
    "\2\302\45\0\1\103\3\0\1\302\1\0\37\115\1\0"+
    "\11\115\2\0\47\115\3\0\1\115\37\0\2\303\10\0"+
    "\2\303\47\0\1\103\1\0\1\303\40\0\2\304\10\0"+
    "\2\304\46\0\1\103\2\0\1\304\2\0\1\12\2\0"+
    "\1\120\1\0\2\12\6\0\6\12\103\0\1\305\4\0"+
    "\2\305\3\0\1\306\2\0\6\305\53\0\1\306\44\0"+
    "\1\307\1\310\1\311\1\312\4\0\2\307\114\0\1\307"+
    "\1\310\1\311\1\312\105\0\1\313\4\0\2\313\6\0"+
    "\6\313\103\0\12\13\1\0\16\13\1\314\1\13\5\0"+
    "\6\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\4\13\1\315\12\13\34\0\12\13\1\0"+
    "\10\13\1\316\7\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\131\1\0\20\131\5\0\6\131\5\0\17\131\34\0"+
    "\1\317\1\0\1\317\1\0\3\317\1\0\2\317\3\0"+
    "\6\317\6\0\2\317\11\0\2\317\5\0\1\317\6\0"+
    "\1\317\50\0\2\320\7\0\5\320\111\0\1\321\7\0"+
    "\1\321\107\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\4\13\1\322\12\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\3\13\1\323\13\13\34\0\12\13\1\0"+
    "\10\13\1\324\7\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\3\13\1\325"+
    "\13\13\34\0\12\13\1\0\20\13\5\0\2\13\1\326"+
    "\3\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\1\13\1\327\15\13\34\0\12\13\1\0"+
    "\14\13\1\330\3\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\11\13\1\331"+
    "\3\13\1\332\1\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\1\13\1\333\15\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\3\13\1\334\13\13\34\0"+
    "\12\13\1\0\12\13\1\335\5\13\5\0\6\13\5\0"+
    "\3\13\1\336\13\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\15\13\1\337\1\13\34\0\12\13\1\0"+
    "\1\340\17\13\5\0\6\13\5\0\17\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\11\13\1\341\5\13"+
    "\34\0\12\13\1\0\20\13\5\0\2\13\1\342\3\13"+
    "\5\0\17\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\6\13\1\343\10\13\34\0\12\13\1\0\10\13"+
    "\1\344\1\13\1\345\5\13\5\0\6\13\5\0\17\13"+
    "\34\0\12\162\1\0\20\162\5\0\6\162\5\0\17\162"+
    "\34\0\1\164\2\346\5\164\1\346\1\164\1\0\1\346"+
    "\7\164\1\346\1\164\1\346\1\164\1\346\1\164\1\346"+
    "\1\164\5\0\1\346\1\164\1\346\1\164\1\346\1\164"+
    "\5\0\17\346\34\0\12\165\1\0\20\165\5\0\6\165"+
    "\5\0\17\165\34\0\12\167\1\0\20\167\5\0\6\167"+
    "\5\0\17\167\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\17\170\34\0\10\170\1\347\1\170\1\0\20\170"+
    "\5\0\6\170\5\0\17\170\35\0\2\170\1\172\1\173"+
    "\2\0\1\173\1\170\1\173\1\0\1\170\1\173\6\0"+
    "\1\170\1\173\1\170\1\173\1\170\1\173\1\170\1\173"+
    "\5\0\1\170\1\173\1\170\1\173\1\170\1\173\5\0"+
    "\17\170\34\0\1\173\2\350\5\173\1\350\1\173\1\0"+
    "\1\350\7\173\1\350\1\173\1\350\1\173\1\350\1\173"+
    "\1\350\1\173\5\0\1\350\1\173\1\350\1\173\1\350"+
    "\1\173\5\0\17\350\34\0\12\170\1\0\12\170\1\351"+
    "\5\170\5\0\1\352\5\170\5\0\1\170\1\353\4\170"+
    "\1\354\1\355\3\170\1\356\3\170\34\0\12\170\1\0"+
    "\16\170\1\357\1\170\5\0\6\170\5\0\1\170\1\360"+
    "\15\170\34\0\12\170\1\0\20\170\5\0\2\170\1\361"+
    "\3\170\5\0\17\170\35\0\2\362\1\177\1\363\2\0"+
    "\1\363\1\362\1\363\1\0\1\362\1\363\6\0\1\362"+
    "\1\363\1\362\1\363\1\362\1\363\1\362\1\363\5\0"+
    "\1\362\1\363\1\362\1\363\1\362\1\363\5\0\17\362"+
    "\34\0\12\170\1\0\12\170\1\364\5\170\5\0\6\170"+
    "\5\0\4\170\1\365\12\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\1\366\16\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\2\170\1\367\14\170\34\0"+
    "\12\170\1\0\14\170\1\370\3\170\5\0\6\170\5\0"+
    "\3\170\1\371\6\170\1\372\4\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\1\373\10\170\1\374\5\170"+
    "\34\0\12\170\1\0\20\170\5\0\6\170\5\0\1\375"+
    "\16\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\1\170\1\376\15\170\34\0\12\13\1\0\7\13\1\32"+
    "\10\13\5\0\6\13\5\0\17\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\3\13\1\377\13\13\34\0"+
    "\12\13\1\0\12\13\1\u0100\5\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\20\13\5\0\2\13\1\u0101"+
    "\3\13\5\0\17\13\34\0\10\13\1\u0102\1\13\1\0"+
    "\20\13\5\0\6\13\5\0\17\13\102\0\1\u0103\56\0"+
    "\37\220\1\0\11\220\3\0\52\220\1\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\2\13\1\u0104\14\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\4\13\1\u0105"+
    "\1\u0106\11\13\34\0\12\13\1\0\20\13\5\0\1\u0107"+
    "\5\13\5\0\17\13\34\0\12\13\1\0\12\13\1\u0108"+
    "\5\13\5\0\6\13\5\0\17\13\34\0\12\13\1\0"+
    "\20\13\5\0\2\13\1\u0109\3\13\5\0\17\13\34\0"+
    "\12\13\1\0\1\u010a\17\13\5\0\6\13\5\0\17\13"+
    "\34\0\12\13\1\0\10\13\1\u010b\7\13\5\0\6\13"+
    "\5\0\2\13\1\u010c\14\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\1\u010d\5\13\1\u010e\10\13\34\0"+
    "\12\13\1\0\20\13\5\0\2\13\1\u010f\3\13\5\0"+
    "\17\13\34\0\12\13\1\0\14\13\1\u0110\3\13\5\0"+
    "\6\13\5\0\17\13\34\0\2\13\1\u0111\7\13\1\0"+
    "\20\13\5\0\6\13\5\0\17\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\7\13\1\u0112\7\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\3\13\1\u0113"+
    "\13\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\1\13\1\u0114\15\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\3\13\1\u0115\1\u0116\12\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\1\u0117\16\13\34\0"+
    "\12\13\1\0\14\13\1\u0118\3\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\14\13\1\u0119\3\13\5\0"+
    "\6\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\6\13\1\u011a\10\13\127\0\1\u011b\125\0"+
    "\1\u011c\32\0\1\305\4\0\2\305\6\0\6\305\6\0"+
    "\2\u011d\73\0\1\305\4\0\2\305\6\0\6\305\122\0"+
    "\1\307\1\0\1\u011e\126\0\1\307\124\0\1\307\104\0"+
    "\1\313\2\0\1\u011f\1\0\2\313\1\0\2\121\3\0"+
    "\6\313\6\0\2\u011d\73\0\10\13\1\u0120\1\13\1\0"+
    "\20\13\5\0\6\13\5\0\1\u0121\16\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\3\13\1\u0122\13\13"+
    "\34\0\12\13\1\0\20\13\5\0\4\13\1\u0123\1\13"+
    "\5\0\17\13\34\0\1\317\1\0\1\317\1\u0124\3\317"+
    "\1\0\2\317\1\0\2\121\6\317\2\122\2\0\2\123"+
    "\2\317\11\0\2\317\1\u0125\4\0\1\317\6\0\1\317"+
    "\46\0\1\u0126\1\0\2\320\7\0\5\320\2\122\2\0"+
    "\2\123\100\0\1\u0127\2\0\1\321\7\0\1\321\4\0"+
    "\2\122\2\0\2\123\75\0\10\13\1\u0128\1\13\1\0"+
    "\20\13\5\0\6\13\5\0\17\13\34\0\10\13\1\u0129"+
    "\1\13\1\0\20\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\5\13\1\u012a"+
    "\11\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\6\13\1\u012b\10\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\1\13\1\u012c\15\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\3\13\1\u012d\13\13\34\0"+
    "\12\13\1\0\20\13\5\0\2\13\1\u012e\3\13\5\0"+
    "\17\13\34\0\12\13\1\0\20\13\5\0\2\13\1\u012f"+
    "\3\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\14\13\1\u0130\2\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\6\13\1\u0131\10\13\34\0"+
    "\12\13\1\0\14\13\1\u0132\3\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\3\13\1\u0133\14\13\5\0"+
    "\6\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\2\13\1\u0134\3\13\5\0\17\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\1\u0135\16\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\1\u0136\16\13\34\0"+
    "\10\13\1\u0137\1\13\1\0\20\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\12\13\1\u0138\5\13\5\0"+
    "\6\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\4\13\1\u0139\12\13\34\0\12\346\1\0"+
    "\20\346\5\0\6\346\5\0\17\346\34\0\12\170\1\0"+
    "\16\170\1\u013a\1\170\5\0\6\170\5\0\17\170\34\0"+
    "\12\350\1\0\20\350\5\0\6\350\5\0\17\350\34\0"+
    "\12\170\1\0\20\170\5\0\6\170\5\0\4\170\1\u013b"+
    "\12\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\3\170\1\u013c\13\170\34\0\2\170\1\u013d\7\170\1\0"+
    "\20\170\5\0\6\170\5\0\17\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\6\170\1\u013e\10\170\34\0"+
    "\12\170\1\0\20\170\5\0\6\170\5\0\11\170\1\u013f"+
    "\5\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\1\u0140\16\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\7\170\1\u0141\7\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\6\170\1\u0142\10\170\34\0\12\362"+
    "\1\0\20\362\5\0\6\362\5\0\17\362\34\0\1\363"+
    "\2\0\5\363\1\0\1\363\2\0\7\363\1\0\1\363"+
    "\1\0\1\363\1\0\1\363\1\0\1\363\6\0\1\363"+
    "\1\0\1\363\1\0\1\363\60\0\12\170\1\0\14\170"+
    "\1\u0143\3\170\5\0\6\170\5\0\17\170\34\0\12\170"+
    "\1\0\20\170\5\0\6\170\5\0\4\170\1\u0144\12\170"+
    "\34\0\12\170\1\0\20\170\5\0\6\170\5\0\5\170"+
    "\1\u0145\11\170\34\0\12\170\1\0\1\u0146\17\170\5\0"+
    "\6\170\5\0\17\170\34\0\12\170\1\0\20\170\5\0"+
    "\6\170\5\0\15\170\1\u0147\1\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\6\170\1\u0148\10\170\34\0"+
    "\12\170\1\0\14\170\1\u0149\3\170\5\0\6\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\4\170\1\u014a\12\170\34\0\10\170\1\u014b\1\170\1\0"+
    "\20\170\5\0\6\170\5\0\17\170\34\0\10\170\1\u014c"+
    "\1\170\1\0\20\170\5\0\6\170\5\0\1\u014d\2\170"+
    "\1\u014e\1\u014f\1\170\1\u0150\1\u0151\7\170\34\0\12\170"+
    "\1\0\20\170\5\0\6\170\5\0\1\u0152\16\170\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\4\13\1\u0153"+
    "\12\13\34\0\12\13\1\0\20\13\5\0\2\13\1\u0154"+
    "\3\13\5\0\17\13\34\0\12\13\1\0\12\13\1\u0155"+
    "\5\13\5\0\6\13\5\0\17\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\1\u0156\16\13\34\0\12\13"+
    "\1\0\16\13\1\u0157\1\13\5\0\6\13\5\0\17\13"+
    "\34\0\10\13\1\u0158\1\13\1\0\20\13\5\0\6\13"+
    "\5\0\17\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\3\13\1\u0159\13\13\34\0\12\13\1\0\12\13"+
    "\1\u015a\5\13\5\0\6\13\5\0\17\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\7\13\1\u015b\7\13"+
    "\34\0\10\13\1\u015c\1\13\1\0\20\13\5\0\6\13"+
    "\5\0\17\13\34\0\10\13\1\u015d\1\13\1\0\20\13"+
    "\5\0\6\13\5\0\17\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\3\13\1\u015e\13\13\34\0\12\13"+
    "\1\0\10\13\1\u015f\7\13\5\0\6\13\5\0\17\13"+
    "\34\0\12\13\1\0\20\13\5\0\6\13\5\0\6\13"+
    "\1\u0160\10\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\3\13\1\u0161\13\13\34\0\12\13\1\0\10\13"+
    "\1\u0162\7\13\5\0\6\13\5\0\17\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\6\13\1\u0163\10\13"+
    "\34\0\12\13\1\0\10\13\1\u0164\7\13\5\0\6\13"+
    "\5\0\17\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\3\13\1\u0165\1\u0166\12\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\7\13\1\u0167\7\13\34\0"+
    "\10\13\1\u0168\1\13\1\0\20\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\6\13\1\u0169\10\13\34\0\12\13\1\0\12\13\1\u016a"+
    "\5\13\5\0\6\13\5\0\17\13\34\0\2\13\1\u016b"+
    "\7\13\1\0\20\13\5\0\6\13\5\0\17\13\51\0"+
    "\1\u016c\1\u016d\1\u016e\1\u016f\122\0\1\307\110\0\1\313"+
    "\2\0\1\u011f\1\0\2\313\6\0\6\313\103\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\6\13\1\u0170\10\13"+
    "\34\0\12\13\1\0\10\13\1\u0171\7\13\5\0\6\13"+
    "\5\0\17\13\34\0\12\13\1\0\14\13\1\u0172\3\13"+
    "\5\0\6\13\5\0\17\13\34\0\12\13\1\0\12\13"+
    "\1\u0173\5\13\5\0\6\13\5\0\17\13\34\0\1\317"+
    "\1\0\1\317\1\u0124\3\317\1\0\2\317\3\0\6\317"+
    "\6\0\2\317\11\0\2\317\5\0\1\317\6\0\1\317"+
    "\43\0\1\u0174\1\0\1\u0174\1\0\3\u0174\1\0\2\u0174"+
    "\3\0\6\u0174\6\0\2\u0174\11\0\2\u0174\5\0\1\u0174"+
    "\6\0\1\u0174\46\0\1\u0126\1\0\2\320\7\0\5\320"+
    "\106\0\1\u0127\2\0\1\321\7\0\1\321\107\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\6\13\1\u0175\10\13"+
    "\34\0\12\13\1\0\20\13\5\0\6\13\5\0\14\13"+
    "\1\u0176\2\13\34\0\12\13\1\0\3\13\1\u0177\14\13"+
    "\5\0\6\13\5\0\17\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\1\13\1\u0178\15\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\6\13\1\u0179\10\13"+
    "\34\0\12\13\1\0\20\13\5\0\6\13\5\0\1\13"+
    "\1\u017a\15\13\34\0\12\13\1\0\6\13\1\u017b\11\13"+
    "\5\0\6\13\5\0\17\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\6\13\1\u017c\10\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\6\13\1\u017d\10\13"+
    "\34\0\12\13\1\0\20\13\5\0\6\13\5\0\3\13"+
    "\1\u017e\13\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\1\u017f\16\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\3\13\1\u0180\13\13\34\0\10\13\1\u0181"+
    "\1\13\1\0\20\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\170\1\0\14\170\1\u0182\3\170\5\0\6\170\5\0"+
    "\1\u0183\16\170\34\0\10\170\1\u0184\1\170\1\0\20\170"+
    "\5\0\6\170\5\0\17\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\1\170\1\u0185\15\170\34\0\12\170"+
    "\1\0\14\170\1\u0186\1\170\1\u0187\1\170\5\0\6\170"+
    "\5\0\4\170\1\u0188\12\170\34\0\12\170\1\0\20\170"+
    "\5\0\2\170\1\u0189\3\170\5\0\17\170\34\0\12\170"+
    "\1\0\20\170\5\0\2\170\1\u018a\3\170\5\0\17\170"+
    "\34\0\12\170\1\0\12\170\1\u018b\5\170\5\0\6\170"+
    "\5\0\17\170\34\0\12\170\1\0\12\170\1\u018c\5\170"+
    "\5\0\6\170\5\0\17\170\34\0\10\170\1\u018d\1\170"+
    "\1\0\20\170\5\0\6\170\5\0\17\170\34\0\12\170"+
    "\1\0\20\170\5\0\6\170\5\0\14\170\1\u018e\2\170"+
    "\34\0\10\170\1\u018f\1\170\1\0\20\170\5\0\6\170"+
    "\5\0\17\170\34\0\10\170\1\u0190\1\170\1\0\20\170"+
    "\5\0\6\170\5\0\17\170\34\0\10\170\1\u0191\1\170"+
    "\1\0\20\170\5\0\6\170\5\0\17\170\34\0\10\170"+
    "\1\u0192\1\170\1\0\20\170\5\0\6\170\5\0\17\170"+
    "\34\0\12\170\1\0\14\170\1\u0193\3\170\5\0\6\170"+
    "\5\0\17\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\3\170\1\u0194\13\170\34\0\10\170\1\u0195\1\170"+
    "\1\0\20\170\5\0\6\170\5\0\17\170\34\0\12\170"+
    "\1\0\20\170\5\0\6\170\5\0\7\170\1\u0196\7\170"+
    "\34\0\12\170\1\0\20\170\5\0\1\u0197\5\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\6\170\1\u0198\10\170\34\0\12\170\1\0\20\170\5\0"+
    "\6\170\5\0\2\170\1\u0199\14\170\34\0\12\170\1\0"+
    "\1\u019a\17\170\5\0\6\170\5\0\17\170\34\0\10\170"+
    "\1\u019b\1\170\1\0\20\170\5\0\6\170\5\0\17\170"+
    "\34\0\12\170\1\0\20\170\5\0\2\170\1\u019c\3\170"+
    "\5\0\17\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\5\170\1\u019d\11\170\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\3\13\1\u019e\13\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\1\u019f\16\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\10\13\1\u01a0"+
    "\6\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\1\u01a1\16\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\6\13\1\u01a2\10\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\7\13\1\u01a3\7\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\1\u01a4\16\13\34\0"+
    "\12\13\1\0\14\13\1\u01a5\3\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\14\13\1\u01a6\3\13\5\0"+
    "\6\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\7\13\1\u01a7\7\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\3\13\1\u01a8\13\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\7\13\1\u01a9"+
    "\7\13\34\0\12\13\1\0\12\13\1\u01aa\5\13\5\0"+
    "\6\13\5\0\17\13\34\0\12\13\1\0\20\13\5\0"+
    "\2\13\1\u01ab\3\13\5\0\17\13\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\6\13\1\u01ac\10\13\34\0"+
    "\12\13\1\0\14\13\1\u01ad\3\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\3\13\1\u01ae\13\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\11\13\1\u01af\5\13\34\0\10\13\1\u01b0"+
    "\1\13\1\0\20\13\5\0\6\13\5\0\17\13\53\0"+
    "\1\u016c\1\0\1\u01b1\126\0\1\u016c\124\0\1\u016c\104\0"+
    "\12\13\1\0\12\13\1\u01b2\5\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\1\13\1\u01b3\15\13\34\0\10\13\1\u01b4\1\13\1\0"+
    "\20\13\5\0\6\13\5\0\17\13\34\0\1\u0174\1\0"+
    "\1\u0174\1\u01b5\3\u0174\1\0\2\u0174\1\0\2\121\6\u0174"+
    "\6\0\2\u0174\11\0\2\u0174\5\0\1\u0174\6\0\1\u0174"+
    "\43\0\12\13\1\0\20\13\5\0\6\13\5\0\1\13"+
    "\1\u01b6\15\13\34\0\12\13\1\0\6\13\1\u01b7\11\13"+
    "\5\0\6\13\5\0\17\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\3\13\1\u01b8\13\13\34\0\10\13"+
    "\1\u01b9\1\13\1\0\20\13\5\0\6\13\5\0\17\13"+
    "\34\0\12\13\1\0\2\13\1\u01ba\15\13\5\0\6\13"+
    "\5\0\17\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\3\13\1\u01bb\13\13\34\0\12\13\1\0\3\13"+
    "\1\u01bc\14\13\5\0\6\13\5\0\17\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\7\13\1\u01bd\7\13"+
    "\34\0\12\170\1\0\20\170\5\0\6\170\5\0\1\170"+
    "\1\u01be\15\170\34\0\12\170\1\0\10\170\1\u01bf\7\170"+
    "\5\0\6\170\5\0\17\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\1\u01c0\16\170\34\0\12\170\1\0"+
    "\16\170\1\u01c1\1\170\5\0\6\170\5\0\17\170\34\0"+
    "\12\170\1\0\20\170\5\0\2\170\1\u01c2\3\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\12\170\1\u01c3\4\170\34\0\12\170\1\0\20\170\5\0"+
    "\6\170\5\0\6\170\1\u01c4\10\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\3\170\1\u01c5\13\170\34\0"+
    "\12\170\1\0\10\170\1\u01c6\7\170\5\0\6\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\1\u01c7\16\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\1\170\1\u01c8\15\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\6\170\1\u01c9\10\170\34\0\12\170"+
    "\1\0\20\170\5\0\2\170\1\u01ca\3\170\5\0\17\170"+
    "\34\0\12\170\1\0\16\170\1\u01cb\1\170\5\0\2\170"+
    "\1\u01cc\3\170\5\0\17\170\34\0\12\170\1\0\20\170"+
    "\5\0\2\170\1\u01cd\3\170\5\0\17\170\34\0\12\170"+
    "\1\0\20\170\5\0\6\170\5\0\1\170\1\u01ce\15\170"+
    "\34\0\12\170\1\0\20\170\5\0\6\170\5\0\7\170"+
    "\1\u01cf\7\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\10\170\1\u01d0\6\170\34\0\12\170\1\0\1\u01d1"+
    "\17\170\5\0\6\170\5\0\17\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\14\170\1\u01d2\2\170\34\0"+
    "\12\170\1\0\1\u01d3\17\170\5\0\6\170\5\0\17\170"+
    "\34\0\12\170\1\0\12\170\1\u01d4\5\170\5\0\6\170"+
    "\5\0\17\170\34\0\12\170\1\0\16\170\1\u01d5\1\170"+
    "\5\0\6\170\5\0\17\170\34\0\12\170\1\0\10\170"+
    "\1\u01d6\7\170\5\0\6\170\5\0\1\170\1\u01d7\15\170"+
    "\34\0\10\170\1\u01d8\1\170\1\0\20\170\5\0\6\170"+
    "\5\0\17\170\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\6\13\1\u01d9\10\13\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\3\13\1\u01da\13\13\34\0\12\13"+
    "\1\0\10\13\1\u01db\7\13\5\0\6\13\5\0\17\13"+
    "\34\0\12\13\1\0\20\13\5\0\6\13\5\0\3\13"+
    "\1\u01dc\13\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\1\u01dd\16\13\34\0\12\13\1\0\12\13\1\u01de"+
    "\5\13\5\0\6\13\5\0\17\13\34\0\2\13\1\u01df"+
    "\7\13\1\0\20\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\7\13\1\u01e0"+
    "\7\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\3\13\1\u01e1\13\13\34\0\12\13\1\0\20\13\5\0"+
    "\6\13\5\0\11\13\1\u01e2\5\13\34\0\10\13\1\u01e3"+
    "\1\13\1\0\20\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\1\13\1\u01e4"+
    "\15\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\1\13\1\u01e5\15\13\51\0\1\u016c\110\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\3\13\1\u01e6\13\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\7\13\1\u01e7"+
    "\7\13\34\0\1\u0174\1\0\1\u0174\1\u01b5\3\u0174\1\0"+
    "\2\u0174\3\0\6\u0174\6\0\2\u0174\11\0\2\u0174\5\0"+
    "\1\u0174\6\0\1\u0174\43\0\12\13\1\0\2\13\1\u01e8"+
    "\15\13\5\0\6\13\5\0\17\13\34\0\12\13\1\0"+
    "\4\13\1\u01e9\1\13\1\u01ea\11\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\11\13\1\u01eb\5\13\34\0\10\170\1\u01ec\1\170\1\0"+
    "\20\170\5\0\6\170\5\0\17\170\34\0\12\170\1\0"+
    "\12\170\1\u01ed\5\170\5\0\6\170\5\0\17\170\34\0"+
    "\12\170\1\0\20\170\5\0\6\170\5\0\5\170\1\u01ee"+
    "\11\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\6\170\1\u01ef\10\170\34\0\12\170\1\0\14\170\1\u01f0"+
    "\3\170\5\0\6\170\5\0\17\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\2\170\1\u01f1\14\170\34\0"+
    "\2\170\1\u01f2\7\170\1\0\20\170\5\0\6\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\7\170\1\u01f3\7\170\34\0\12\170\1\0\20\170\5\0"+
    "\2\170\1\u01f4\3\170\5\0\17\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\3\170\1\u01f5\13\170\34\0"+
    "\12\170\1\0\16\170\1\u01f6\1\170\5\0\6\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\6\170\1\u01f7\10\170\34\0\12\170\1\0\16\170\1\u01f8"+
    "\1\170\5\0\6\170\5\0\17\170\34\0\12\170\1\0"+
    "\16\170\1\u01f9\1\170\5\0\6\170\5\0\17\170\34\0"+
    "\12\170\1\0\20\170\5\0\6\170\5\0\14\170\1\u01fa"+
    "\2\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\11\170\1\u01fb\5\170\34\0\12\170\1\0\20\170\5\0"+
    "\6\170\5\0\4\170\1\u01fc\12\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\6\170\1\u01fd\10\170\34\0"+
    "\10\170\1\u01fe\1\170\1\0\20\170\5\0\6\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\1\u01ff\16\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\1\170\1\u0200\15\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\4\170\1\u0201\12\170\34\0\12\170"+
    "\1\0\20\170\5\0\2\170\1\u0202\3\170\5\0\17\170"+
    "\34\0\12\13\1\0\10\13\1\u0203\7\13\5\0\6\13"+
    "\5\0\17\13\34\0\12\13\1\0\3\13\1\u0204\14\13"+
    "\5\0\6\13\5\0\17\13\34\0\12\13\1\0\12\13"+
    "\1\u0205\5\13\5\0\6\13\5\0\17\13\34\0\12\13"+
    "\1\0\20\13\5\0\6\13\5\0\4\13\1\u0206\12\13"+
    "\34\0\12\13\1\0\10\13\1\u0207\7\13\5\0\6\13"+
    "\5\0\17\13\34\0\12\13\1\0\20\13\5\0\6\13"+
    "\5\0\3\13\1\u0208\13\13\34\0\12\13\1\0\2\13"+
    "\1\u0209\15\13\5\0\6\13\5\0\17\13\34\0\3\13"+
    "\1\u020a\6\13\1\0\20\13\5\0\6\13\5\0\17\13"+
    "\34\0\2\170\1\u020b\7\170\1\0\20\170\5\0\6\170"+
    "\5\0\17\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\3\170\1\u020c\13\170\34\0\10\170\1\u020d\1\170"+
    "\1\0\20\170\5\0\6\170\5\0\17\170\34\0\10\170"+
    "\1\u020e\1\170\1\0\20\170\5\0\6\170\5\0\17\170"+
    "\34\0\12\170\1\0\20\170\5\0\6\170\5\0\3\170"+
    "\1\u020f\13\170\34\0\12\170\1\0\1\u0210\17\170\5\0"+
    "\6\170\5\0\17\170\34\0\10\170\1\u0211\1\170\1\0"+
    "\20\170\5\0\6\170\5\0\17\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\11\170\1\u0212\5\170\34\0"+
    "\12\170\1\0\16\170\1\u0213\1\170\5\0\6\170\5\0"+
    "\17\170\34\0\12\170\1\0\20\170\5\0\2\170\1\u0214"+
    "\3\170\5\0\17\170\34\0\12\170\1\0\14\170\1\u0215"+
    "\3\170\5\0\6\170\5\0\17\170\34\0\12\170\1\0"+
    "\20\170\5\0\6\170\5\0\3\170\1\u0216\13\170\34\0"+
    "\12\170\1\0\20\170\5\0\6\170\5\0\3\170\1\u0217"+
    "\13\170\34\0\12\170\1\0\20\170\5\0\6\170\5\0"+
    "\3\170\1\u0218\13\170\34\0\12\170\1\0\16\170\1\u0219"+
    "\1\170\5\0\6\170\5\0\17\170\34\0\12\13\1\0"+
    "\20\13\5\0\6\13\5\0\7\13\1\u021a\7\13\34\0"+
    "\12\13\1\0\4\13\1\u021b\13\13\5\0\6\13\5\0"+
    "\17\13\34\0\12\13\1\0\20\13\5\0\6\13\5\0"+
    "\3\13\1\u021c\13\13\34\0\10\13\1\u021d\1\13\1\0"+
    "\20\13\5\0\6\13\5\0\17\13\34\0\10\13\1\u021e"+
    "\1\13\1\0\20\13\5\0\6\13\5\0\17\13\34\0"+
    "\12\13\1\0\20\13\5\0\6\13\5\0\6\13\1\u021f"+
    "\10\13\34\0\12\170\1\0\20\170\5\0\2\170\1\u0220"+
    "\3\170\5\0\17\170\34\0\12\170\1\0\20\170\5\0"+
    "\6\170\5\0\1\u0221\16\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\7\170\1\u0222\7\170\34\0\10\170"+
    "\1\u0223\1\170\1\0\20\170\5\0\6\170\5\0\17\170"+
    "\34\0\12\170\1\0\20\170\5\0\6\170\5\0\5\170"+
    "\1\u0224\11\170\34\0\12\170\1\0\16\170\1\u0225\1\170"+
    "\5\0\6\170\5\0\17\170\34\0\12\13\1\0\20\13"+
    "\5\0\6\13\5\0\3\13\1\u0226\13\13\34\0\12\170"+
    "\1\0\16\170\1\u0227\1\170\5\0\6\170\5\0\17\170"+
    "\34\0\12\170\1\0\20\170\5\0\6\170\5\0\7\170"+
    "\1\u0228\7\170\34\0\12\170\1\0\20\170\5\0\6\170"+
    "\5\0\11\170\1\u0229\5\170\34\0\12\170\1\0\20\170"+
    "\5\0\6\170\5\0\2\170\1\u022a\14\170\34\0\12\170"+
    "\1\0\20\170\5\0\6\170\5\0\11\170\1\u022b\5\170"+
    "\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35346];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\54\1\11\11\1\1\1\11\2\1\1\11"+
    "\2\1\2\11\2\1\1\11\5\1\2\0\1\1\2\0"+
    "\3\1\1\0\1\1\3\0\3\1\2\11\21\1\1\0"+
    "\2\1\1\0\3\1\1\0\4\1\1\0\7\1\3\11"+
    "\7\1\2\11\24\1\4\11\1\1\26\11\3\0\1\1"+
    "\1\0\1\11\3\0\70\1\1\11\27\1\2\11\1\1"+
    "\2\0\4\1\4\0\104\1\1\11\3\0\4\1\1\0"+
    "\74\1\1\0\3\1\1\0\166\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int commentNesting = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  C3Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 186: break;
          case 2: 
            { return C3Types.INT_LITERAL;
            } 
            // fall through
          case 187: break;
          case 3: 
            { return C3Types.IDENT;
            } 
            // fall through
          case 188: break;
          case 4: 
            { return C3Types.CONST_IDENT;
            } 
            // fall through
          case 189: break;
          case 5: 
            { return C3Types.PLUS;
            } 
            // fall through
          case 190: break;
          case 6: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 191: break;
          case 7: 
            { return C3Types.DOT;
            } 
            // fall through
          case 192: break;
          case 8: 
            { return C3Types.DIV;
            } 
            // fall through
          case 193: break;
          case 9: 
            { return C3Types.LT_OP;
            } 
            // fall through
          case 194: break;
          case 10: 
            { return C3Types.EQ;
            } 
            // fall through
          case 195: break;
          case 11: 
            { return C3Types.GT_OP;
            } 
            // fall through
          case 196: break;
          case 12: 
            { return C3Types.AMP;
            } 
            // fall through
          case 197: break;
          case 13: 
            { return C3Types.MINUS;
            } 
            // fall through
          case 198: break;
          case 14: 
            { return C3Types.BIT_OR;
            } 
            // fall through
          case 199: break;
          case 15: 
            { return C3Types.BIT_XOR;
            } 
            // fall through
          case 200: break;
          case 16: 
            { return C3Types.QUESTION;
            } 
            // fall through
          case 201: break;
          case 17: 
            { return C3Types.COLON;
            } 
            // fall through
          case 202: break;
          case 18: 
            { return C3Types.LB;
            } 
            // fall through
          case 203: break;
          case 19: 
            { return C3Types.LBT;
            } 
            // fall through
          case 204: break;
          case 20: 
            { return C3Types.LP;
            } 
            // fall through
          case 205: break;
          case 21: 
            { return C3Types.MOD;
            } 
            // fall through
          case 206: break;
          case 22: 
            { return C3Types.STAR;
            } 
            // fall through
          case 207: break;
          case 23: 
            { return C3Types.BANG;
            } 
            // fall through
          case 208: break;
          case 24: 
            { return C3Types.RB;
            } 
            // fall through
          case 209: break;
          case 25: 
            { return C3Types.RBT;
            } 
            // fall through
          case 210: break;
          case 26: 
            { return C3Types.RP;
            } 
            // fall through
          case 211: break;
          case 27: 
            { return C3Types.BIT_NOT;
            } 
            // fall through
          case 212: break;
          case 28: 
            { return C3Types.COMMA;
            } 
            // fall through
          case 213: break;
          case 29: 
            { return C3Types.EOS;
            } 
            // fall through
          case 214: break;
          case 30: 
            { yybegin(IN_STRING);
            } 
            // fall through
          case 215: break;
          case 31: 
            { yybegin(IN_RAW_STRING);
            } 
            // fall through
          case 216: break;
          case 32: 
            { yybegin(IN_CHAR);
            } 
            // fall through
          case 217: break;
          case 33: 
            { return C3ParserDefinition.BLOCK_COMMENT;
            } 
            // fall through
          case 218: break;
          case 34: 
            { 
            } 
            // fall through
          case 219: break;
          case 35: 
            { yybegin(YYINITIAL); return C3Types.STRING_LIT;
            } 
            // fall through
          case 220: break;
          case 36: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 221: break;
          case 37: 
            { yybegin(YYINITIAL); return C3Types.CHAR_LIT;
            } 
            // fall through
          case 222: break;
          case 38: 
            { yybegin(YYINITIAL); return C3Types.BYTES;
            } 
            // fall through
          case 223: break;
          case 39: 
            { return C3Types.KW_DO;
            } 
            // fall through
          case 224: break;
          case 40: 
            { return C3Types.TYPE_IDENT;
            } 
            // fall through
          case 225: break;
          case 41: 
            { return C3Types.PLUSPLUS;
            } 
            // fall through
          case 226: break;
          case 42: 
            { return C3Types.PLUS_ASSIGN;
            } 
            // fall through
          case 227: break;
          case 43: 
            { return C3Types.KW_IF;
            } 
            // fall through
          case 228: break;
          case 44: 
            { return C3Types.KW_FN;
            } 
            // fall through
          case 229: break;
          case 45: 
            { return C3Types.AT_IDENT;
            } 
            // fall through
          case 230: break;
          case 46: 
            { return C3Types.HASH_IDENT;
            } 
            // fall through
          case 231: break;
          case 47: 
            { return C3Types.CT_IDENT;
            } 
            // fall through
          case 232: break;
          case 48: 
            { return C3Types.CT_CONST_IDENT;
            } 
            // fall through
          case 233: break;
          case 49: 
            { yybegin(IN_BYTES_STRING);
            } 
            // fall through
          case 234: break;
          case 50: 
            { yybegin(IN_BYTES_RAW_STRING);
            } 
            // fall through
          case 235: break;
          case 51: 
            { yybegin(IN_BYTES_CHAR);
            } 
            // fall through
          case 236: break;
          case 52: 
            { return C3Types.DOTDOT;
            } 
            // fall through
          case 237: break;
          case 53: 
            { return C3ParserDefinition.LINE_COMMENT;
            } 
            // fall through
          case 238: break;
          case 54: 
            { return C3Types.DIV_ASSIGN;
            } 
            // fall through
          case 239: break;
          case 55: 
            { yybegin(IN_COMMENT); commentNesting = 1; return C3ParserDefinition.BLOCK_COMMENT;
            } 
            // fall through
          case 240: break;
          case 56: 
            { return C3Types.SHL;
            } 
            // fall through
          case 241: break;
          case 57: 
            { return C3Types.LE_OP;
            } 
            // fall through
          case 242: break;
          case 58: 
            { return C3Types.EQ_OP;
            } 
            // fall through
          case 243: break;
          case 59: 
            { return C3Types.IMPLIES;
            } 
            // fall through
          case 244: break;
          case 60: 
            { return C3Types.GE_OP;
            } 
            // fall through
          case 245: break;
          case 61: 
            { return C3Types.SHR;
            } 
            // fall through
          case 246: break;
          case 62: 
            { return C3Types.RVEC;
            } 
            // fall through
          case 247: break;
          case 63: 
            { return C3Types.RGENPAR;
            } 
            // fall through
          case 248: break;
          case 64: 
            { return C3Types.BIT_AND_ASSIGN;
            } 
            // fall through
          case 249: break;
          case 65: 
            { return C3Types.AND;
            } 
            // fall through
          case 250: break;
          case 66: 
            { return C3Types.MINUS_ASSIGN;
            } 
            // fall through
          case 251: break;
          case 67: 
            { return C3Types.MINUSMINUS;
            } 
            // fall through
          case 252: break;
          case 68: 
            { return C3Types.BIT_OR_ASSIGN;
            } 
            // fall through
          case 253: break;
          case 69: 
            { return C3Types.OR;
            } 
            // fall through
          case 254: break;
          case 70: 
            { return C3Types.RBRAPIPE;
            } 
            // fall through
          case 255: break;
          case 71: 
            { return C3Types.BIT_XOR_ASSIGN;
            } 
            // fall through
          case 256: break;
          case 72: 
            { return C3Types.OPTELSE;
            } 
            // fall through
          case 257: break;
          case 73: 
            { return C3Types.ELVIS;
            } 
            // fall through
          case 258: break;
          case 74: 
            { return C3Types.SCOPE;
            } 
            // fall through
          case 259: break;
          case 75: 
            { return C3Types.LBRAPIPE;
            } 
            // fall through
          case 260: break;
          case 76: 
            { return C3Types.LVEC;
            } 
            // fall through
          case 261: break;
          case 77: 
            { return C3Types.LGENPAR;
            } 
            // fall through
          case 262: break;
          case 78: 
            { return C3Types.MOD_ASSIGN;
            } 
            // fall through
          case 263: break;
          case 79: 
            { return C3Types.MULT_ASSIGN;
            } 
            // fall through
          case 264: break;
          case 80: 
            { return C3Types.NE_OP;
            } 
            // fall through
          case 265: break;
          case 81: 
            { return C3Types.BANGBANG;
            } 
            // fall through
          case 266: break;
          case 82: 
            { commentNesting++; return C3ParserDefinition.BLOCK_COMMENT;
            } 
            // fall through
          case 267: break;
          case 83: 
            { if (--commentNesting == 0) { yybegin(YYINITIAL); return C3ParserDefinition.BLOCK_COMMENT; }
            } 
            // fall through
          case 268: break;
          case 84: 
            { return C3Types.FLOAT_LITERAL;
            } 
            // fall through
          case 269: break;
          case 85: 
            { return C3Types.KW_DEF;
            } 
            // fall through
          case 270: break;
          case 86: 
            { return C3Types.KW_USZ;
            } 
            // fall through
          case 271: break;
          case 87: 
            { return C3Types.KW_INT;
            } 
            // fall through
          case 272: break;
          case 88: 
            { return C3Types.KW_ISZ;
            } 
            // fall through
          case 273: break;
          case 89: 
            { return C3Types.KW_FOR;
            } 
            // fall through
          case 274: break;
          case 90: 
            { return C3Types.AT_TYPE_IDENT;
            } 
            // fall through
          case 275: break;
          case 91: 
            { return C3Types.CT_TYPE_IDENT;
            } 
            // fall through
          case 276: break;
          case 92: 
            { return C3Types.KW_CT_IF;
            } 
            // fall through
          case 277: break;
          case 93: 
            { return C3Types.BUILTIN;
            } 
            // fall through
          case 278: break;
          case 94: 
            { return C3Types.BUILTIN_CONST;
            } 
            // fall through
          case 279: break;
          case 95: 
            { return C3Types.ELLIPSIS;
            } 
            // fall through
          case 280: break;
          case 96: 
            { return C3Types.KW_ANY;
            } 
            // fall through
          case 281: break;
          case 97: 
            { return C3Types.KW_ASM;
            } 
            // fall through
          case 282: break;
          case 98: 
            { return C3Types.KW_TRY;
            } 
            // fall through
          case 283: break;
          case 99: 
            { return C3Types.KW_VAR;
            } 
            // fall through
          case 284: break;
          case 100: 
            { return C3Types.SHL_ASSIGN;
            } 
            // fall through
          case 285: break;
          case 101: 
            { return C3Types.SHR_ASSIGN;
            } 
            // fall through
          case 286: break;
          case 102: 
            { return C3Types.KW_ELSE;
            } 
            // fall through
          case 287: break;
          case 103: 
            { return C3Types.KW_ENUM;
            } 
            // fall through
          case 288: break;
          case 104: 
            { return C3Types.KW_UPTR;
            } 
            // fall through
          case 289: break;
          case 105: 
            { return C3Types.KW_UINT;
            } 
            // fall through
          case 290: break;
          case 106: 
            { return C3Types.KW_LONG;
            } 
            // fall through
          case 291: break;
          case 107: 
            { return C3Types.KW_IPTR;
            } 
            // fall through
          case 292: break;
          case 108: 
            { return C3Types.KW_CT_FOR;
            } 
            // fall through
          case 293: break;
          case 109: 
            { return C3Types.KW_BOOL;
            } 
            // fall through
          case 294: break;
          case 110: 
            { return C3Types.KW_NULL;
            } 
            // fall through
          case 295: break;
          case 111: 
            { return C3Types.KW_TRUE;
            } 
            // fall through
          case 296: break;
          case 112: 
            { return C3Types.KW_CASE;
            } 
            // fall through
          case 297: break;
          case 113: 
            { return C3Types.KW_CHAR;
            } 
            // fall through
          case 298: break;
          case 114: 
            { return C3Types.KW_VOID;
            } 
            // fall through
          case 299: break;
          case 115: 
            { return C3Types.KW_DEFER;
            } 
            // fall through
          case 300: break;
          case 116: 
            { return C3Types.KW_ULONG;
            } 
            // fall through
          case 301: break;
          case 117: 
            { return C3Types.KW_UNION;
            } 
            // fall through
          case 302: break;
          case 118: 
            { return C3Types.KW_ICHAR;
            } 
            // fall through
          case 303: break;
          case 119: 
            { return C3Types.KW_FLOAT;
            } 
            // fall through
          case 304: break;
          case 120: 
            { return C3Types.KW_FAULT;
            } 
            // fall through
          case 305: break;
          case 121: 
            { return C3Types.KW_FALSE;
            } 
            // fall through
          case 306: break;
          case 122: 
            { return C3Types.KW_CT_ELSE;
            } 
            // fall through
          case 307: break;
          case 123: 
            { return C3Types.KW_CT_ECHO;
            } 
            // fall through
          case 308: break;
          case 124: 
            { return C3Types.KW_CT_EVAL;
            } 
            // fall through
          case 309: break;
          case 125: 
            { return C3Types.KW_CT_CASE;
            } 
            // fall through
          case 310: break;
          case 126: 
            { return C3Types.KW_BREAK;
            } 
            // fall through
          case 311: break;
          case 127: 
            { return C3Types.KW_SHORT;
            } 
            // fall through
          case 312: break;
          case 128: 
            { return C3Types.KW_MACRO;
            } 
            // fall through
          case 313: break;
          case 129: 
            { return C3Types.KW_CONST;
            } 
            // fall through
          case 314: break;
          case 130: 
            { return C3Types.KW_CATCH;
            } 
            // fall through
          case 315: break;
          case 131: 
            { return C3Types.KW_WHILE;
            } 
            // fall through
          case 316: break;
          case 132: 
            { return C3Types.KW_DOUBLE;
            } 
            // fall through
          case 317: break;
          case 133: 
            { return C3Types.KW_EXTERN;
            } 
            // fall through
          case 318: break;
          case 134: 
            { return C3Types.KW_USHORT;
            } 
            // fall through
          case 319: break;
          case 135: 
            { return C3Types.KW_INLINE;
            } 
            // fall through
          case 320: break;
          case 136: 
            { return C3Types.KW_INT128;
            } 
            // fall through
          case 321: break;
          case 137: 
            { return C3Types.KW_IMPORT;
            } 
            // fall through
          case 322: break;
          case 138: 
            { return C3Types.KW_CT_ENDIF;
            } 
            // fall through
          case 323: break;
          case 139: 
            { return C3Types.KW_CT_ERROR;
            } 
            // fall through
          case 324: break;
          case 140: 
            { return C3Types.KW_CT_VAARG;
            } 
            // fall through
          case 325: break;
          case 141: 
            { return C3Types.KW_CT_VAREF;
            } 
            // fall through
          case 326: break;
          case 142: 
            { return C3Types.KW_ASSERT;
            } 
            // fall through
          case 327: break;
          case 143: 
            { return C3Types.KW_TLOCAL;
            } 
            // fall through
          case 328: break;
          case 144: 
            { return C3Types.KW_TYPEID;
            } 
            // fall through
          case 329: break;
          case 145: 
            { return C3Types.KW_STATIC;
            } 
            // fall through
          case 330: break;
          case 146: 
            { return C3Types.KW_STRUCT;
            } 
            // fall through
          case 331: break;
          case 147: 
            { return C3Types.KW_SWITCH;
            } 
            // fall through
          case 332: break;
          case 148: 
            { return C3Types.KW_MODULE;
            } 
            // fall through
          case 333: break;
          case 149: 
            { return C3Types.KW_RETURN;
            } 
            // fall through
          case 334: break;
          case 150: 
            { return C3Types.KW_DEFAULT;
            } 
            // fall through
          case 335: break;
          case 151: 
            { return C3Types.KW_UINT128;
            } 
            // fall through
          case 336: break;
          case 152: 
            { return C3Types.KW_FLOAT16;
            } 
            // fall through
          case 337: break;
          case 153: 
            { return C3Types.KW_FOREACH;
            } 
            // fall through
          case 338: break;
          case 154: 
            { return C3Types.KW_CT_ENDFOR;
            } 
            // fall through
          case 339: break;
          case 155: 
            { return C3Types.KW_CT_ASSERT;
            } 
            // fall through
          case 340: break;
          case 156: 
            { return C3Types.KW_CT_NAMEOF;
            } 
            // fall through
          case 341: break;
          case 157: 
            { return C3Types.KW_CT_TYPEOF;
            } 
            // fall through
          case 342: break;
          case 158: 
            { return C3Types.KW_CT_SIZEOF;
            } 
            // fall through
          case 343: break;
          case 159: 
            { return C3Types.KW_CT_SWITCH;
            } 
            // fall through
          case 344: break;
          case 160: 
            { return C3Types.KW_CT_CHECKS;
            } 
            // fall through
          case 345: break;
          case 161: 
            { return C3Types.KW_CT_VAEXPR;
            } 
            // fall through
          case 346: break;
          case 162: 
            { return C3Types.KW_CT_VATYPE;
            } 
            // fall through
          case 347: break;
          case 163: 
            { return C3Types.KW_DISTINCT;
            } 
            // fall through
          case 348: break;
          case 164: 
            { return C3Types.KW_FLOAT128;
            } 
            // fall through
          case 349: break;
          case 165: 
            { return C3Types.KW_CT_DEFINED;
            } 
            // fall through
          case 350: break;
          case 166: 
            { return C3Types.KW_CT_DEFAULT;
            } 
            // fall through
          case 351: break;
          case 167: 
            { return C3Types.KW_CT_INCLUDE;
            } 
            // fall through
          case 352: break;
          case 168: 
            { return C3Types.KW_CT_FOREACH;
            } 
            // fall through
          case 353: break;
          case 169: 
            { return C3Types.KW_CT_ALIGNOF;
            } 
            // fall through
          case 354: break;
          case 170: 
            { return C3Types.KW_CT_VASPLAT;
            } 
            // fall through
          case 355: break;
          case 171: 
            { return C3Types.KW_CT_VACOUNT;
            } 
            // fall through
          case 356: break;
          case 172: 
            { return C3Types.KW_CT_VACONST;
            } 
            // fall through
          case 357: break;
          case 173: 
            { return C3Types.KW_CT_QNAMEOF;
            } 
            // fall through
          case 358: break;
          case 174: 
            { return C3Types.KW_BFLOAT16;
            } 
            // fall through
          case 359: break;
          case 175: 
            { return C3Types.KW_ANYFAULT;
            } 
            // fall through
          case 360: break;
          case 176: 
            { return C3Types.KW_NEXTCASE;
            } 
            // fall through
          case 361: break;
          case 177: 
            { return C3Types.KW_CONTINUE;
            } 
            // fall through
          case 362: break;
          case 178: 
            { return C3Types.KW_FOREACH_R;
            } 
            // fall through
          case 363: break;
          case 179: 
            { return C3Types.KW_CT_EVALTYPE;
            } 
            // fall through
          case 364: break;
          case 180: 
            { return C3Types.KW_CT_TYPEFROM;
            } 
            // fall through
          case 365: break;
          case 181: 
            { return C3Types.KW_BITSTRUCT;
            } 
            // fall through
          case 366: break;
          case 182: 
            { return C3Types.KW_CT_EXTNAMEOF;
            } 
            // fall through
          case 367: break;
          case 183: 
            { return C3Types.KW_CT_ENDSWITCH;
            } 
            // fall through
          case 368: break;
          case 184: 
            { return C3Types.KW_CT_STRINGIFY;
            } 
            // fall through
          case 369: break;
          case 185: 
            { return C3Types.KW_CT_ENDFOREACH;
            } 
            // fall through
          case 370: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
